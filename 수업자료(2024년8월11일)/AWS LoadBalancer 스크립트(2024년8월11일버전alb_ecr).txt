##############################[AWS LoadBalancer Controller 설치 가이드(2024년8월11일)]############################


##Step 1. 먼저 클러스터의 IAM OIDC 자격 증명 공급자를 생성합니다. Kubernetes 서비스 계정에 IAM 역할을 사용하려면, 클러스터에 IAM OIDC 공급자가 필요합니다.

eksctl utils associate-iam-oidc-provider --cluster k8s-cluster --approve

##Step 2. AWS Load Balancer Controller가 AWS API 호출을 허용하는 IAM 정책을 다운로드 받아서, IAM 정책을 생성합니다.
          생성된 정책(Policy)의 Arn 값은 Step 3에서 사용하기 때문에 미리 복사합니다.
	    
curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.3.1/docs/install/iam_policy.json

##Step 3.실행 결과값을 나중에 사용하기 위해서 미리 복사합니다

aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy.json 
실행결과값=====================================================================
{
    "Policy": {
        "PolicyName": "AWSLoadBalancerControllerIAMPolicy",
        "PolicyId": "ANPAYVHTDRPO5WSQVE4VH",
        "Arn": "arn:aws:iam::595362810845:policy/AWSLoadBalancerControllerIAMPolicy",
        "Path": "/",
        "DefaultVersionId": "v1",
        "AttachmentCount": 0,
        "PermissionsBoundaryUsageCount": 0,
        "IsAttachable": true,
        "CreateDate": "2024-08-10T11:30:35+00:00",
        "UpdateDate": "2024-08-10T11:30:35+00:00"
    }
}
=====================================================================

##Step 4. aws-load-balancer-controller라는 Kubernetes 서비스 계정에 대한 IAM 역할을 생성합니다.이 때, 
          Step3에서 IAM 정책(Policy) 생성 시에 확인된 Arn을 이용하여 역할(Role)에 연결합니다. 
	    
eksctl create iamserviceaccount \
  --cluster=k8s-cluster \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --attach-policy-arn=arn:aws:iam::595362810845:policy/AWSLoadBalancerControllerIAMPolicy \
  --override-existing-serviceaccounts \
  --approve
  
이때 중요한것은 실행한 결과값중에서 아래 내용에 대한 권한을 부여하는 것이다.
1) IAM > 역활에서 아래명령어 검색 
eksctl-k8s-cluster-addon-iamserviceaccount

2)eksctl-k8s-cluster-addon-iamserviceaccount-ku-Role1-P8yuQqQ2G4zM 아래와 같이 권한추가
===> ElasticLoadBalancingFullAccess


##Step 5. Helm을 이용해서, AWS Load Balancer Controller을 설치하기 위해 eks-charts Repo를 추가하고, 최신 차트 적용을 위해 업데이트합니다.   
=========================================================================================================================
$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh
 
helm repo add eks https://aws.github.io/eks-charts
helm repo update
========================================================================================================================= 
##Step 6. Helm을 이용해서 AWS Load Balancer Controller을 설치합니다.

 helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
   -n kube-system \
   --set clusterName=k8s-cluster \
   --set serviceAccount.create=false \
   --set serviceAccount.name=aws-load-balancer-controller \
   --set image.repository=602401143452.dkr.ecr.ap-northeast-2.amazonaws.com/amazon/aws-load-balancer-controller \
   --set region=ap-northeast-2 \
   --set vpcId=vpc-04cbcade9de0097a1

맨 마지막 결과값 : AWS Load Balancer controller installed!  (정상설치 완료)

##Step 7. 이제 AWS Load Balancer Controller이 잘 설치가 되었는지 확인합니다.  

kubectl get deployment -n kube-system aws-load-balancer-controller
root@ip-10-250-1-153:~# kubectl get deployment -n kube-system aws-load-balancer-controller
NAME                           READY   UP-TO-DATE   AVAILABLE   AGE
aws-load-balancer-controller    2/2     2            2           22s

root@ip-10-250-1-153:~# kubectl get pods -n kube-system
NAME                                            READY   STATUS    RESTARTS   AGE
aws-load-balancer-controller-85f9d99d94-9fnsv     1/1     Running   0          35s
aws-load-balancer-controller-85f9d99d94-kgq7q     1/1     Running   0          35s
aws-node-tk5ll                                             2/2     Running   0          3h40m
aws-node-tqd89                                             2/2     Running   0          3h40m
coredns-f94fb47d9-4tmrh                                    1/1     Running   0          3h45m
coredns-f94fb47d9-ncshz                                    1/1     Running   0          3h45m
kube-proxy-4xqj6                                           1/1     Running   0          3h40m
kube-proxy-7gkml                                           1/1     Running   0          3h40m

(AWS LoadBalancer controller log 확인)
kubectl logs -n kube-system aws-load-balancer-controller-85f9d99d94-9fnsv 
kubectl logs -n kube-system aws-load-balancer-controller-55bfc5bf48-nnqj7

=======================================================================================================
[최종단계]===============================================================================================
AWS Load Balancer Controller이 설치가 되었으니, 이제 서비스를 배포하고 이 서비스를 ALB에 연결해서 테스트 해보겠습니다.

##Step 8. 서비스 테스트를 위한  alb-test.yaml' 파일을 다음과 같이 작성합니다. 
# vi alb-test.yaml
# kubectl apply -f alb-test.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-alb-test
  labels:
    app: nginx-alb-test
spec:
  containers:
  - name: nginx
    image: powermvp/marvel-collection
    ports:
    - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-alb-svc
spec:
  selector:
    app: nginx-alb-test
  ports:
  - name: http
    port: 80
    targetPort: 80
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-alb-test
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-alb-svc
            port:
              number: 80
================================================================================================================
================================================================================================================
##Step 9. 작성한 alb-test.yaml을 이용해서, 배포 후에 정상적으로 pod 와 Service가 보이는지 확인 합니다.

kubectl apply -f alb-test.yaml
$ kubectl get pods -A
$ kubectl get service -A

##Step 10. 도메인에 연결하여 정상적으로 홈페이지가 뜨는지 확인한다.
	