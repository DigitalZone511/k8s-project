########=====aws cli 명령을 이용해서 한기대 AWS ECS 생성하기[2024년8월3일(토)]가이드문서=====#######

==============================================================================================
1.  ubuntu22.0.4(Ubuntu Server 22.04 LTS (HVM), SSD Volume Type Linux EC2) 호스트 준비
    AWS EC2 instance를 생성해서 ecs managed server로 사용  
    우선 먼저 AWS EC2 Ubuntu22.0.4 Linux 를 하나 만들자 (어디에 : VEC-PRD-VPC-NGINX-PUB-2A 서브넷에 만들자)
==============================================================================================
2. ubuntu Linux EC2 에 AWS CLI 관리툴인 aws cli 설치 
  참고: https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/install-cliv2-linux.html
  $ sudo apt-get install -y unzip
  $ curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  $ unzip awscliv2.zip
  $ sudo ./aws/install
	  You can now run: /usr/local/bin/
	  
  $ aws  --version
aws-cli/2.15.15 Python/3.11.6 Linux/5.15.0-1048-aws exe/x86_64.ubuntu.20 prompt/off
 
===============================================================================================
3.  ubuntu Linux EC2 에서 aws 관리 할수 있도록 CLI 통한  로그인 하기 
보안자격증명 > 액세스 키 키만들기 선택 > 로컬에 저장
===============================================================================================
root@ip-10-250-1-234:~# aws configure
AWS Access Key ID [None]: AKIAYVHTDRPOZxxxxxxxxxx  (본인 Access Key)
AWS Secret Access Key [None]: pumZ38bnidBiL6mQ/l7B6TzlZDaxxxxxxxxxxxxx (본인 Secret Access Key)
Default region name [None]: ap-northeast-2
Default output format [None]: 
root@ip-10-250-1-234:~# 
===============================================================================
root@ip-10-250-1-234:~# aws configure list
      Name                    Value             Type    Location
      ----                    -----             ----    --------
   profile                <not set>             None    None
access_key     ****************RFGA shared-credentials-file    
secret_key     ****************0hbu shared-credentials-file    
    region           ap-northeast-2      config-file    ~/.aws/config
===============================================================================
root@ip-10-250-1-234:~# aws sts get-caller-identity  
{
    "UserId": "595362810xxx",
    "Account": "595362810xxx",
    "Arn": "arn:aws:iam::595362810Xxxx:root"
}
===============================================================================정상로그인 되었음

4. Ubuntu22.04 버전에 Docker 데몬을 설치하자 [전달해 드린 Docker 설치 (install-docker.sh 실행)]

5. root@ip-10-250-1-234:~# mkdir dockerfile-folder
root@ip-10-250-1-234:~# exit
logout
ubuntu@ip-10-250-1-234:~$ ls
dockerfile  index.html
ubuntu@ip-10-250-1-234:~$ sudo mv ./* /root/dockerfile-folder
ubuntu@ip-10-250-1-234:~$ su -
Password: 
root@ip-10-250-1-234:~# ls
aws  awscliv2.zip  bin  dockerfile-folder  kubectl  snap
root@ip-10-250-1-234:~# cd dockerfile-folder/
root@ip-10-250-1-234:~/dockerfile-folder# ls
dockerfile  index.html
root@ip-10-250-1-234:~/dockerfile-folder# vi dockerfile 
root@ip-10-250-1-234:~/dockerfile-folder# ls
dockerfile  index.html
root@ip-10-250-1-234:~/dockerfile-folder# docker build -t ecs-nginx .

root@ip-10-250-1-234:~/dockerfile-folder# docker images
REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
ecs-nginx    latest    1eea60601fcb   6 seconds ago   187MB
root@ip-10-250-1-234:~/dockerfile-folder# docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
root@ip-10-250-1-234:~/dockerfile-folder# docker run -d --name nginx-container -p 8000:80 1eea60601fcb
e2d4dd16846ed7429db50dc586f6bc3b335488a1e06f75f02b74b367564a714b
root@ip-10-250-1-234:~/dockerfile-folder# docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                   NAMES
e2d4dd16846e   1eea60601fcb   "/docker-entrypoint.…"   4 seconds ago   Up 2 seconds   0.0.0.0:8000->80/tcp, :::8000->80/tcp   nginx-container
root@ip-10-250-1-234:~/dockerfile-folder# curl http://43.203.195.200:8000
<html>
<head> 
<title>Amazon ECS Connected Success !!!</title> 
<style>
body {margin-top: 40px; background-color: #333;}
</style> 
</head>
<body>
<div style=color:white;text-align:center>
<h1>Amazon ECS Connected Success !!!</h1>
<h2>Congratulations!</h2>
<p><em>Your application is now running on a container in Amazon ECS.</em></p>
</p> </div>
</body>
</html>root@ip-10-250-1-234:~/dockerfile-folder# 

6. 정상적으로 "Amazon ECS Connected Success !!!" 뜬다면 다음은 AWS ECR에 기존 빌드했던 컨테이너 이미지를 등록 해보자 

6-1 아래명령어 실행 (AWS ECR 푸쉬명령어보기 화면 선택후 1번명령어를 복사해 온다)
root@ip-10-250-1-234:~/dockerfile-folder# aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 595362810845.dkr.ecr.ap-northeast-2.amazonaws.com
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded

6-2 컨테이너 빌드는 진행완료 했으므로 생략한다.
6-3 아래명령어 실행
root@ip-10-250-1-234:~/dockerfile-folder# docker tag ecs-nginx:latest 595362810845.dkr.ecr.ap-northeast-2.amazonaws.com/ecs-nginx:latest

6-4 아래명령어 실행
root@ip-10-250-1-234:~/dockerfile-folder# docker push 595362810845.dkr.ecr.ap-northeast-2.amazonaws.com/ecs-nginx:latest
The push refers to repository [595362810845.dkr.ecr.ap-northeast-2.amazonaws.com/ecs-nginx]
48f9f816312a: Pushed 
009507b85609: Pushed 
fbcc9bc44d3e: Pushed 
b4ad47845036: Pushed 
eddcd06e5ef9: Pushed 
b61d4b2cd2da: Pushed 
b6c2a8d6f0ac: Pushed 
571ade696b26: Pushed 
latest: digest: sha256:c201620f18943f342eb98e8a3edd0ec61f506b63b2bb4751751937ef2079c8f0 size: 1985
root@ip-10-250-1-234:~/dockerfile-folder# 

위와 같이 정상적으로 AWS ECR에 컨테이너 이미지가 올라가 있는것을 볼 수 있다.